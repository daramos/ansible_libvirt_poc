---
- name: Generate additional cloud-init paths
  set_fact:
    vm_xml_path: "{{ host_vm_storage_dir }}/{{vm_hostname}}.xml"
# We first create an XML with a fake MAC address, uuid, and name (because it will fail if the the vm is already defined)
# We also use  --check all=off since if the VM is already defined, the disk will be in use ("Disk [...] is already in use by other guests")
- name: generating virtual machine xml for {{ vm_hostname }} 
  command: >
      virt-install --import
        --name VM_HOSTNAME_GOES_HERE
        --ram {{ vm_ram_in_mb }}
        --vcpus {{ vm_vcpu }}
        --os-type linux 
        --disk path={{ vm_image_path }},format=qcow2,bus=virtio 
        --disk path={{ vm_cloud_init_img }},format=qcow2,bus=virtio 
        --os-variant {{ vm_os_variant }}
        --network network:{{ host_vm_network_name }},model=virtio
        --uuid 00000001-0000-0000-0000-000000000001
        --mac=11:22:33:44:55:66
        --print-xml
        --check all=off
  register: vm_xml_cmd
  changed_when: false

- name: "Save xml for {{ vm_hostname }} "
  copy:
    dest: "{{ vm_xml_path }}"
    content: "{{ vm_xml_cmd.stdout
                | regex_replace('11:22:33:44:55:66', vm_mac_address)
                | regex_replace('VM_HOSTNAME_GOES_HERE', vm_hostname)
                | regex_replace('00000001-0000-0000-0000-000000000001', vm_uuid)}}"
    mode: "664"
  register: vm_xml_file

- name: Determine if VM definition exists
  command: virsh desc {{ vm_hostname }}
  failed_when: false
  changed_when: false
  register: virsh_desc

- set_fact:
    vm_changed: "{{ vm_image_create_task.changed == True
                  or vm_xml_file.changed == True
                  or cloud_init_changed == True
                  or 'failed to get domain' in virsh_desc.stderr}}"

- name: Stopping existing vm (if exists) for {{ vm_hostname }}
  command: "virsh destroy {{ vm_hostname }}"
  register: result
  failed_when: result.rc > 0 and "failed to get domain" not in result.stderr and "domain is not running" not in result.stderr
  changed_when: result.rc == 0
  when: vm_changed

- name: Removing existing vm (if exists) for {{ vm_hostname }}
  command: "virsh undefine {{ vm_hostname }}"
  register: result
  failed_when: result.rc > 0 and "failed to get domain" not in result.stderr
  changed_when: result.rc == 0
  when: vm_changed

- name: Defining virtual machine {{ vm_hostname }}
  command: "virsh define --file {{ vm_xml_path }}"
  when: vm_changed
 
- name: starting virtual machine {{ vm_hostname }}
  command: "virsh start {{ vm_hostname }}"
  when: vm_changed

- name: Setting VM {{ vm_hostname }} to autostart
  command: "virsh autostart {{ vm_hostname }}"
  when: vm_changed